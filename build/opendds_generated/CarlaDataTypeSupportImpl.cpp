/* Generated by /home/sdv/OpenDDS-3.21/bin/opendds_idl version 3.21.0 (ACE version 6.2a_p25) running on input file /media/sdv/47d6b45a-afd5-40a2-b8ae-c185573d86ab/Image_DDS_COde/yashesvi/carlabridge-end/CarlaData.idl */
#include "CarlaDataTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#ifndef OPENDDS_SAFETY_PROFILE
  #include "dds/CorbaSeq/OctetSeqTypeSupportImpl.h"
#endif
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/XTypes/TypeObject.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: OpenDDS */


/* End MODULE: OpenDDS */


/* Begin MODULE: CarlaData */



/* Begin STRUCT: RadarSensor */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<CarlaData_RadarSensor_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(118, 40, 221, 14, 122, 115, 28, 70, 59, 1, 122, 116, 75, 199));
  }
  return ti;
}

static const XTypes::TypeMap& get_minimal_type_map();
template<> const XTypes::TypeMap& getMinimalTypeMap<CarlaData_RadarSensor_xtag>()
{
  return get_minimal_type_map();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::CarlaData::RadarSensor& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"depth",0},{"azimuth",1},{"altitude",2},{"velocity",3},{"ego_velocity",4},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct()) return false;
  XTypes::MemberId member_id;
  while (value_reader.begin_struct_member(member_id, helper)) {
    switch (member_id) {
    case 0: {
      if (!value_reader.read_float32(value.depth)) return false;
      break;
    }
    case 1: {
      if (!value_reader.read_float32(value.azimuth)) return false;
      break;
    }
    case 2: {
      if (!value_reader.read_float32(value.altitude)) return false;
      break;
    }
    case 3: {
      if (!value_reader.read_float32(value.velocity)) return false;
      break;
    }
    case 4: {
      if (!value_reader.read_float32(value.ego_velocity)) return false;
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::CarlaData::RadarSensor& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  value_writer.begin_struct();
  value_writer.begin_struct_member(XTypes::MemberDescriptor("depth", false));
  value_writer.write_float32(value.depth);
  value_writer.end_struct_member();
  value_writer.begin_struct_member(XTypes::MemberDescriptor("azimuth", false));
  value_writer.write_float32(value.azimuth);
  value_writer.end_struct_member();
  value_writer.begin_struct_member(XTypes::MemberDescriptor("altitude", false));
  value_writer.write_float32(value.altitude);
  value_writer.end_struct_member();
  value_writer.begin_struct_member(XTypes::MemberDescriptor("velocity", false));
  value_writer.write_float32(value.velocity);
  value_writer.end_struct_member();
  value_writer.begin_struct_member(XTypes::MemberDescriptor("ego_velocity", false));
  value_writer.write_float32(value.ego_velocity);
  value_writer.end_struct_member();
  value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::CarlaData::RadarSensor& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.depth = 0;
  stru.azimuth = 0;
  stru.altitude = 0;
  stru.velocity = 0;
  stru.ego_velocity = 0;
}

void serialized_size(const Encoding& encoding, size_t& size, const  ::CarlaData::RadarSensor& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.depth);
  primitive_serialized_size(encoding, size, stru.azimuth);
  primitive_serialized_size(encoding, size, stru.altitude);
  primitive_serialized_size(encoding, size, stru.velocity);
  primitive_serialized_size(encoding, size, stru.ego_velocity);
}

bool operator<<(Serializer& strm, const  ::CarlaData::RadarSensor& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.depth)
    && (strm << stru.azimuth)
    && (strm << stru.altitude)
    && (strm << stru.velocity)
    && (strm << stru.ego_velocity);
}

bool operator>>(Serializer& strm,  ::CarlaData::RadarSensor& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.depth)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.azimuth)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.altitude)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.velocity)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.ego_velocity)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const  ::CarlaData::RadarSensor>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.depth);
  primitive_serialized_size(encoding, size, stru.value.azimuth);
  primitive_serialized_size(encoding, size, stru.value.altitude);
  primitive_serialized_size(encoding, size, stru.value.velocity);
  primitive_serialized_size(encoding, size, stru.value.ego_velocity);
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const  ::CarlaData::RadarSensor>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.depth)
    && (strm << stru.value.azimuth)
    && (strm << stru.value.altitude)
    && (strm << stru.value.velocity)
    && (strm << stru.value.ego_velocity);
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::CarlaData::RadarSensor>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.value.depth)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.value.azimuth)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.value.altitude)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.value.velocity)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.value.ego_velocity)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::CarlaData::RadarSensor>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
}

bool operator<<(Serializer& strm, const KeyOnly<const  ::CarlaData::RadarSensor>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return true;
}

bool operator>>(Serializer& strm, const KeyOnly< ::CarlaData::RadarSensor>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace CarlaData {
::DDS::DataWriter_ptr RadarSensorTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<RadarSensor> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr RadarSensorTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<RadarSensor> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr RadarSensorTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<RadarSensor> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<RadarSensor, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& RadarSensorTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<RadarSensor>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

bool RadarSensorTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key();
}

const char* RadarSensorTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}

void RadarSensorTypeSupportImpl::representations_allowed_by_type(
  ::DDS::DataRepresentationIdSeq& seq)
{
  MarshalTraitsType::representations_allowed_by_type(seq);
}

const OpenDDS::XTypes::TypeIdentifier& RadarSensorTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::CarlaData_RadarSensor_xtag>();
}

const OpenDDS::XTypes::TypeMap& RadarSensorTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::CarlaData_RadarSensor_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& RadarSensorTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& RadarSensorTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

OpenDDS::DCPS::Extensibility RadarSensorTypeSupportImpl::getExtensibility() const
{
  return MarshalTraitsType::extensibility();
}

RadarSensorTypeSupport::_ptr_type RadarSensorTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::CarlaData::RadarSensor> : MetaStruct {
  typedef  ::CarlaData::RadarSensor T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool isDcpsKey(const char* field) const
  {
    ACE_UNUSED_ARG(field);
    return false;
  }

  ACE_CDR::ULong map_name_to_id(const char* field) const
  {
    static const std::pair<std::string, ACE_CDR::ULong> name_to_id_pairs[] = {
      std::make_pair("depth", 0),
      std::make_pair("azimuth", 1),
      std::make_pair("altitude", 2),
      std::make_pair("velocity", 3),
      std::make_pair("ego_velocity", 4),
    };
    static const std::map<std::string, ACE_CDR::ULong> name_to_id_map(name_to_id_pairs, name_to_id_pairs + 5);
    std::map<std::string, ACE_CDR::ULong>::const_iterator it = name_to_id_map.find(field);
    if (it == name_to_id_map.end()) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::CarlaData::RadarSensor)");
    } else {
      return it->second;
    }
  }

  Value getValue(const void* stru, const char* field) const
  {
    const  ::CarlaData::RadarSensor& typed = *static_cast<const  ::CarlaData::RadarSensor*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "depth") == 0) {
      return typed.depth;
    }
    if (std::strcmp(field, "azimuth") == 0) {
      return typed.azimuth;
    }
    if (std::strcmp(field, "altitude") == 0) {
      return typed.altitude;
    }
    if (std::strcmp(field, "velocity") == 0) {
      return typed.velocity;
    }
    if (std::strcmp(field, "ego_velocity") == 0) {
      return typed.ego_velocity;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::CarlaData::RadarSensor)");
  }

  Value getValue(Serializer& strm, const char* field) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      throw std::runtime_error("Unable to reader delimiter in getValue");
    }
  }
    std::string base_field = field;
    size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "depth") {
      ACE_CDR::Float val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'depth' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'depth' could not be skipped");
      }
    }
    if (base_field == "azimuth") {
      ACE_CDR::Float val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'azimuth' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'azimuth' could not be skipped");
      }
    }
    if (base_field == "altitude") {
      ACE_CDR::Float val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'altitude' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'altitude' could not be skipped");
      }
    }
    if (base_field == "velocity") {
      ACE_CDR::Float val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'velocity' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'velocity' could not be skipped");
      }
    }
    if (base_field == "ego_velocity") {
      ACE_CDR::Float val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'ego_velocity' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'ego_velocity' could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "depth") == 0) {
      return make_field_cmp(&T::depth, next);
    }
    if (std::strcmp(field, "azimuth") == 0) {
      return make_field_cmp(&T::azimuth, next);
    }
    if (std::strcmp(field, "altitude") == 0) {
      return make_field_cmp(&T::altitude, next);
    }
    if (std::strcmp(field, "velocity") == 0) {
      return make_field_cmp(&T::velocity, next);
    }
    if (std::strcmp(field, "ego_velocity") == 0) {
      return make_field_cmp(&T::ego_velocity, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::CarlaData::RadarSensor)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"depth", "azimuth", "altitude", "velocity", "ego_velocity", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "depth") == 0) {
      return &static_cast<const T*>(stru)->depth;
    }
    if (std::strcmp(field, "azimuth") == 0) {
      return &static_cast<const T*>(stru)->azimuth;
    }
    if (std::strcmp(field, "altitude") == 0) {
      return &static_cast<const T*>(stru)->altitude;
    }
    if (std::strcmp(field, "velocity") == 0) {
      return &static_cast<const T*>(stru)->velocity;
    }
    if (std::strcmp(field, "ego_velocity") == 0) {
      return &static_cast<const T*>(stru)->ego_velocity;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::CarlaData::RadarSensor)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "depth") == 0) {
      static_cast<T*>(lhs)->depth = *static_cast<const  ::CORBA::Float*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "azimuth") == 0) {
      static_cast<T*>(lhs)->azimuth = *static_cast<const  ::CORBA::Float*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "altitude") == 0) {
      static_cast<T*>(lhs)->altitude = *static_cast<const  ::CORBA::Float*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "velocity") == 0) {
      static_cast<T*>(lhs)->velocity = *static_cast<const  ::CORBA::Float*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "ego_velocity") == 0) {
      static_cast<T*>(lhs)->ego_velocity = *static_cast<const  ::CORBA::Float*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::CarlaData::RadarSensor)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "depth") == 0) {
      return static_cast<const T*>(lhs)->depth == static_cast<const T*>(rhs)->depth;
    }
    if (std::strcmp(field, "azimuth") == 0) {
      return static_cast<const T*>(lhs)->azimuth == static_cast<const T*>(rhs)->azimuth;
    }
    if (std::strcmp(field, "altitude") == 0) {
      return static_cast<const T*>(lhs)->altitude == static_cast<const T*>(rhs)->altitude;
    }
    if (std::strcmp(field, "velocity") == 0) {
      return static_cast<const T*>(lhs)->velocity == static_cast<const T*>(rhs)->velocity;
    }
    if (std::strcmp(field, "ego_velocity") == 0) {
      return static_cast<const T*>(lhs)->ego_velocity == static_cast<const T*>(rhs)->ego_velocity;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::CarlaData::RadarSensor)");
  }
};

template<>
const MetaStruct& getMetaStruct< ::CarlaData::RadarSensor>()
{
  static MetaStructImpl< ::CarlaData::RadarSensor> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::CarlaData::RadarSensor*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::CarlaData::RadarSensor>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: RadarSensor */


/* Begin STRUCT: VehicleOdometry */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<CarlaData_VehicleOdometry_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(5, 90, 95, 145, 234, 154, 192, 199, 245, 232, 240, 224, 242, 76));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<CarlaData_VehicleOdometry_xtag>()
{
  return get_minimal_type_map();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::CarlaData::VehicleOdometry& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"throttle",0},{"brake",1},{"steering",2},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct()) return false;
  XTypes::MemberId member_id;
  while (value_reader.begin_struct_member(member_id, helper)) {
    switch (member_id) {
    case 0: {
      if (!value_reader.read_float32(value.throttle)) return false;
      break;
    }
    case 1: {
      if (!value_reader.read_float32(value.brake)) return false;
      break;
    }
    case 2: {
      if (!value_reader.read_float32(value.steering)) return false;
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::CarlaData::VehicleOdometry& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  value_writer.begin_struct();
  value_writer.begin_struct_member(XTypes::MemberDescriptor("throttle", false));
  value_writer.write_float32(value.throttle);
  value_writer.end_struct_member();
  value_writer.begin_struct_member(XTypes::MemberDescriptor("brake", false));
  value_writer.write_float32(value.brake);
  value_writer.end_struct_member();
  value_writer.begin_struct_member(XTypes::MemberDescriptor("steering", false));
  value_writer.write_float32(value.steering);
  value_writer.end_struct_member();
  value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::CarlaData::VehicleOdometry& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.throttle = 0;
  stru.brake = 0;
  stru.steering = 0;
}

void serialized_size(const Encoding& encoding, size_t& size, const  ::CarlaData::VehicleOdometry& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.throttle);
  primitive_serialized_size(encoding, size, stru.brake);
  primitive_serialized_size(encoding, size, stru.steering);
}

bool operator<<(Serializer& strm, const  ::CarlaData::VehicleOdometry& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.throttle)
    && (strm << stru.brake)
    && (strm << stru.steering);
}

bool operator>>(Serializer& strm,  ::CarlaData::VehicleOdometry& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.throttle)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.brake)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.steering)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const  ::CarlaData::VehicleOdometry>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.throttle);
  primitive_serialized_size(encoding, size, stru.value.brake);
  primitive_serialized_size(encoding, size, stru.value.steering);
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const  ::CarlaData::VehicleOdometry>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.throttle)
    && (strm << stru.value.brake)
    && (strm << stru.value.steering);
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::CarlaData::VehicleOdometry>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.value.throttle)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.value.brake)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.value.steering)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::CarlaData::VehicleOdometry>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
}

bool operator<<(Serializer& strm, const KeyOnly<const  ::CarlaData::VehicleOdometry>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return true;
}

bool operator>>(Serializer& strm, const KeyOnly< ::CarlaData::VehicleOdometry>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace CarlaData {
::DDS::DataWriter_ptr VehicleOdometryTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<VehicleOdometry> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr VehicleOdometryTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<VehicleOdometry> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr VehicleOdometryTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<VehicleOdometry> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<VehicleOdometry, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& VehicleOdometryTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<VehicleOdometry>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

bool VehicleOdometryTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key();
}

const char* VehicleOdometryTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}

void VehicleOdometryTypeSupportImpl::representations_allowed_by_type(
  ::DDS::DataRepresentationIdSeq& seq)
{
  MarshalTraitsType::representations_allowed_by_type(seq);
}

const OpenDDS::XTypes::TypeIdentifier& VehicleOdometryTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::CarlaData_VehicleOdometry_xtag>();
}

const OpenDDS::XTypes::TypeMap& VehicleOdometryTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::CarlaData_VehicleOdometry_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& VehicleOdometryTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& VehicleOdometryTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

OpenDDS::DCPS::Extensibility VehicleOdometryTypeSupportImpl::getExtensibility() const
{
  return MarshalTraitsType::extensibility();
}

VehicleOdometryTypeSupport::_ptr_type VehicleOdometryTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::CarlaData::VehicleOdometry> : MetaStruct {
  typedef  ::CarlaData::VehicleOdometry T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool isDcpsKey(const char* field) const
  {
    ACE_UNUSED_ARG(field);
    return false;
  }

  ACE_CDR::ULong map_name_to_id(const char* field) const
  {
    static const std::pair<std::string, ACE_CDR::ULong> name_to_id_pairs[] = {
      std::make_pair("throttle", 0),
      std::make_pair("brake", 1),
      std::make_pair("steering", 2),
    };
    static const std::map<std::string, ACE_CDR::ULong> name_to_id_map(name_to_id_pairs, name_to_id_pairs + 3);
    std::map<std::string, ACE_CDR::ULong>::const_iterator it = name_to_id_map.find(field);
    if (it == name_to_id_map.end()) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::CarlaData::VehicleOdometry)");
    } else {
      return it->second;
    }
  }

  Value getValue(const void* stru, const char* field) const
  {
    const  ::CarlaData::VehicleOdometry& typed = *static_cast<const  ::CarlaData::VehicleOdometry*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "throttle") == 0) {
      return typed.throttle;
    }
    if (std::strcmp(field, "brake") == 0) {
      return typed.brake;
    }
    if (std::strcmp(field, "steering") == 0) {
      return typed.steering;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::CarlaData::VehicleOdometry)");
  }

  Value getValue(Serializer& strm, const char* field) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      throw std::runtime_error("Unable to reader delimiter in getValue");
    }
  }
    std::string base_field = field;
    size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "throttle") {
      ACE_CDR::Float val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'throttle' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'throttle' could not be skipped");
      }
    }
    if (base_field == "brake") {
      ACE_CDR::Float val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'brake' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'brake' could not be skipped");
      }
    }
    if (base_field == "steering") {
      ACE_CDR::Float val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'steering' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'steering' could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "throttle") == 0) {
      return make_field_cmp(&T::throttle, next);
    }
    if (std::strcmp(field, "brake") == 0) {
      return make_field_cmp(&T::brake, next);
    }
    if (std::strcmp(field, "steering") == 0) {
      return make_field_cmp(&T::steering, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::CarlaData::VehicleOdometry)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"throttle", "brake", "steering", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "throttle") == 0) {
      return &static_cast<const T*>(stru)->throttle;
    }
    if (std::strcmp(field, "brake") == 0) {
      return &static_cast<const T*>(stru)->brake;
    }
    if (std::strcmp(field, "steering") == 0) {
      return &static_cast<const T*>(stru)->steering;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::CarlaData::VehicleOdometry)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "throttle") == 0) {
      static_cast<T*>(lhs)->throttle = *static_cast<const  ::CORBA::Float*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "brake") == 0) {
      static_cast<T*>(lhs)->brake = *static_cast<const  ::CORBA::Float*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "steering") == 0) {
      static_cast<T*>(lhs)->steering = *static_cast<const  ::CORBA::Float*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::CarlaData::VehicleOdometry)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "throttle") == 0) {
      return static_cast<const T*>(lhs)->throttle == static_cast<const T*>(rhs)->throttle;
    }
    if (std::strcmp(field, "brake") == 0) {
      return static_cast<const T*>(lhs)->brake == static_cast<const T*>(rhs)->brake;
    }
    if (std::strcmp(field, "steering") == 0) {
      return static_cast<const T*>(lhs)->steering == static_cast<const T*>(rhs)->steering;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::CarlaData::VehicleOdometry)");
  }
};

template<>
const MetaStruct& getMetaStruct< ::CarlaData::VehicleOdometry>()
{
  static MetaStructImpl< ::CarlaData::VehicleOdometry> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::CarlaData::VehicleOdometry*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::CarlaData::VehicleOdometry>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: VehicleOdometry */


/* Begin STRUCT: ImageSensor */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<CarlaData_ImageSensor_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(220, 10, 166, 107, 57, 146, 81, 246, 203, 141, 46, 133, 45, 53));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<CarlaData_ImageSensor_xtag>()
{
  return get_minimal_type_map();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::CarlaData::ImageSensor& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"raw_data",0},{"height",1},{"width",2},{"pixel_size",3},{"image_type",4},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct()) return false;
  XTypes::MemberId member_id;
  while (value_reader.begin_struct_member(member_id, helper)) {
    switch (member_id) {
    case 0: {
      if (!value_reader.begin_sequence()) return false;
      for (unsigned int i = 0; value_reader.elements_remaining(); ++i) {
        OpenDDS::DCPS::grow(value.raw_data);
        if (!value_reader.begin_element()) return false;
        if (!value_reader.read_byte(value.raw_data[i])) return false;
        if (!value_reader.end_element()) return false;
      }
      if (!value_reader.end_sequence()) return false;
      break;
    }
    case 1: {
      if (!value_reader.read_uint16(value.height)) return false;
      break;
    }
    case 2: {
      if (!value_reader.read_uint16(value.width)) return false;
      break;
    }
    case 3: {
      if (!value_reader.read_uint8(value.pixel_size)) return false;
      break;
    }
    case 4: {
      if (!value_reader.read_int16(value.image_type)) return false;
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::CarlaData::ImageSensor& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  value_writer.begin_struct();
  value_writer.begin_struct_member(XTypes::MemberDescriptor("raw_data", false));
  value_writer.begin_sequence();
  value_writer.write_byte_array (value.raw_data.get_buffer(), value.raw_data.length());
  value_writer.end_sequence();
  value_writer.end_struct_member();
  value_writer.begin_struct_member(XTypes::MemberDescriptor("height", false));
  value_writer.write_uint16(value.height);
  value_writer.end_struct_member();
  value_writer.begin_struct_member(XTypes::MemberDescriptor("width", false));
  value_writer.write_uint16(value.width);
  value_writer.end_struct_member();
  value_writer.begin_struct_member(XTypes::MemberDescriptor("pixel_size", false));
  value_writer.write_uint8(value.pixel_size);
  value_writer.end_struct_member();
  value_writer.begin_struct_member(XTypes::MemberDescriptor("image_type", false));
  value_writer.write_int16(value.image_type);
  value_writer.end_struct_member();
  value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::CarlaData::ImageSensor& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.raw_data.length(0);
  stru.height = 0;
  stru.width = 0;
  stru.pixel_size = 0;
  stru.image_type = 0;
}

void serialized_size(const Encoding& encoding, size_t& size, const  ::CarlaData::ImageSensor::_raw_data_seq& seq)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(seq);
  primitive_serialized_size_ulong(encoding, size);
  if (seq.length() == 0) {
    return;
  }
  primitive_serialized_size_octet(encoding, size, seq.length());
}

bool operator<<(Serializer& strm, const  ::CarlaData::ImageSensor::_raw_data_seq& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  return strm.write_octet_array(seq.get_buffer(), length);
}

bool operator>>(Serializer& strm,  ::CarlaData::ImageSensor::_raw_data_seq& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  if (length > strm.length()) {
    if (DCPS_debug_level >= 8) {
      ACE_DEBUG((LM_DEBUG, ACE_TEXT("(%P|%t) Invalid sequence length (%u)\n"), length));
    }
    return false;
  }
  CORBA::ULong new_length = length;
  seq.length(new_length);
  if (length == 0) {
    return true;
  }
  return strm.read_octet_array(seq.get_buffer(), length);
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const  ::CarlaData::ImageSensor& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  serialized_size(encoding, size, stru.raw_data);
  primitive_serialized_size(encoding, size, stru.height);
  primitive_serialized_size(encoding, size, stru.width);
  primitive_serialized_size(encoding, size, ACE_OutputCDR::from_uint8(stru.pixel_size));
  primitive_serialized_size(encoding, size, stru.image_type);
}

bool operator<<(Serializer& strm, const  ::CarlaData::ImageSensor& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.raw_data)
    && (strm << stru.height)
    && (strm << stru.width)
    && (strm << ACE_OutputCDR::from_uint8(stru.pixel_size))
    && (strm << stru.image_type);
}

bool operator>>(Serializer& strm,  ::CarlaData::ImageSensor& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.raw_data)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.height)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.width)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> ACE_InputCDR::to_uint8(stru.pixel_size))) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.image_type)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const  ::CarlaData::ImageSensor>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  serialized_size(encoding, size, stru.value.raw_data);
  primitive_serialized_size(encoding, size, stru.value.height);
  primitive_serialized_size(encoding, size, stru.value.width);
  primitive_serialized_size(encoding, size, ACE_OutputCDR::from_uint8(stru.value.pixel_size));
  primitive_serialized_size(encoding, size, stru.value.image_type);
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const  ::CarlaData::ImageSensor>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.raw_data)
    && (strm << stru.value.height)
    && (strm << stru.value.width)
    && (strm << ACE_OutputCDR::from_uint8(stru.value.pixel_size))
    && (strm << stru.value.image_type);
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::CarlaData::ImageSensor>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.value.raw_data)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.value.height)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.value.width)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> ACE_InputCDR::to_uint8(stru.value.pixel_size))) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.value.image_type)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::CarlaData::ImageSensor>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
}

bool operator<<(Serializer& strm, const KeyOnly<const  ::CarlaData::ImageSensor>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return true;
}

bool operator>>(Serializer& strm, const KeyOnly< ::CarlaData::ImageSensor>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace CarlaData {
::DDS::DataWriter_ptr ImageSensorTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<ImageSensor> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr ImageSensorTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<ImageSensor> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr ImageSensorTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<ImageSensor> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<ImageSensor, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& ImageSensorTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<ImageSensor>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

bool ImageSensorTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key();
}

const char* ImageSensorTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}

void ImageSensorTypeSupportImpl::representations_allowed_by_type(
  ::DDS::DataRepresentationIdSeq& seq)
{
  MarshalTraitsType::representations_allowed_by_type(seq);
}

const OpenDDS::XTypes::TypeIdentifier& ImageSensorTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::CarlaData_ImageSensor_xtag>();
}

const OpenDDS::XTypes::TypeMap& ImageSensorTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::CarlaData_ImageSensor_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& ImageSensorTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& ImageSensorTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

OpenDDS::DCPS::Extensibility ImageSensorTypeSupportImpl::getExtensibility() const
{
  return MarshalTraitsType::extensibility();
}

ImageSensorTypeSupport::_ptr_type ImageSensorTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::CarlaData::ImageSensor> : MetaStruct {
  typedef  ::CarlaData::ImageSensor T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool isDcpsKey(const char* field) const
  {
    ACE_UNUSED_ARG(field);
    return false;
  }

  ACE_CDR::ULong map_name_to_id(const char* field) const
  {
    static const std::pair<std::string, ACE_CDR::ULong> name_to_id_pairs[] = {
      std::make_pair("raw_data", 0),
      std::make_pair("height", 1),
      std::make_pair("width", 2),
      std::make_pair("pixel_size", 3),
      std::make_pair("image_type", 4),
    };
    static const std::map<std::string, ACE_CDR::ULong> name_to_id_map(name_to_id_pairs, name_to_id_pairs + 5);
    std::map<std::string, ACE_CDR::ULong>::const_iterator it = name_to_id_map.find(field);
    if (it == name_to_id_map.end()) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::CarlaData::ImageSensor)");
    } else {
      return it->second;
    }
  }

  Value getValue(const void* stru, const char* field) const
  {
    const  ::CarlaData::ImageSensor& typed = *static_cast<const  ::CarlaData::ImageSensor*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "height") == 0) {
      return typed.height;
    }
    if (std::strcmp(field, "width") == 0) {
      return typed.width;
    }
    if (std::strcmp(field, "pixel_size") == 0) {
      return typed.pixel_size;
    }
    if (std::strcmp(field, "image_type") == 0) {
      return typed.image_type;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::CarlaData::ImageSensor)");
  }

  Value getValue(Serializer& strm, const char* field) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      throw std::runtime_error("Unable to reader delimiter in getValue");
    }
  }
    std::string base_field = field;
    size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (!gen_skip_over(strm, static_cast< ::CarlaData::ImageSensor::_raw_data_seq*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (base_field == "height") {
      ACE_CDR::UShort val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'height' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  2 )) {
        throw std::runtime_error("Field 'height' could not be skipped");
      }
    }
    if (base_field == "width") {
      ACE_CDR::UShort val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'width' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  2 )) {
        throw std::runtime_error("Field 'width' could not be skipped");
      }
    }
    if (base_field == "pixel_size") {
      ACE_CDR::UInt8 val;
      if (!(strm >> ACE_InputCDR::to_uint8(val))) {
        throw std::runtime_error("Field 'pixel_size' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  1 )) {
        throw std::runtime_error("Field 'pixel_size' could not be skipped");
      }
    }
    if (base_field == "image_type") {
      ACE_CDR::Short val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'image_type' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  2 )) {
        throw std::runtime_error("Field 'image_type' could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "height") == 0) {
      return make_field_cmp(&T::height, next);
    }
    if (std::strcmp(field, "width") == 0) {
      return make_field_cmp(&T::width, next);
    }
    if (std::strcmp(field, "pixel_size") == 0) {
      return make_field_cmp(&T::pixel_size, next);
    }
    if (std::strcmp(field, "image_type") == 0) {
      return make_field_cmp(&T::image_type, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::CarlaData::ImageSensor)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"raw_data", "height", "width", "pixel_size", "image_type", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "raw_data") == 0) {
      return &static_cast<const T*>(stru)->raw_data;
    }
    if (std::strcmp(field, "height") == 0) {
      return &static_cast<const T*>(stru)->height;
    }
    if (std::strcmp(field, "width") == 0) {
      return &static_cast<const T*>(stru)->width;
    }
    if (std::strcmp(field, "pixel_size") == 0) {
      return &static_cast<const T*>(stru)->pixel_size;
    }
    if (std::strcmp(field, "image_type") == 0) {
      return &static_cast<const T*>(stru)->image_type;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::CarlaData::ImageSensor)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "raw_data") == 0) {
      static_cast<T*>(lhs)->raw_data = *static_cast<const  ::CarlaData::ImageSensor::_raw_data_seq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "height") == 0) {
      static_cast<T*>(lhs)->height = *static_cast<const  ::CORBA::UShort*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "width") == 0) {
      static_cast<T*>(lhs)->width = *static_cast<const  ::CORBA::UShort*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "pixel_size") == 0) {
      static_cast<T*>(lhs)->pixel_size = *static_cast<const  ::CORBA::UInt8*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "image_type") == 0) {
      static_cast<T*>(lhs)->image_type = *static_cast<const  ::CORBA::Short*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::CarlaData::ImageSensor)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "height") == 0) {
      return static_cast<const T*>(lhs)->height == static_cast<const T*>(rhs)->height;
    }
    if (std::strcmp(field, "width") == 0) {
      return static_cast<const T*>(lhs)->width == static_cast<const T*>(rhs)->width;
    }
    if (std::strcmp(field, "pixel_size") == 0) {
      return static_cast<const T*>(lhs)->pixel_size == static_cast<const T*>(rhs)->pixel_size;
    }
    if (std::strcmp(field, "image_type") == 0) {
      return static_cast<const T*>(lhs)->image_type == static_cast<const T*>(rhs)->image_type;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::CarlaData::ImageSensor)");
  }
};

template<>
const MetaStruct& getMetaStruct< ::CarlaData::ImageSensor>()
{
  static MetaStructImpl< ::CarlaData::ImageSensor> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::CarlaData::ImageSensor::_raw_data_seq*)
{
  ACE_UNUSED_ARG(ser);
  const Encoding& encoding = ser.encoding();
  ACE_UNUSED_ARG(encoding);
  ACE_CDR::ULong length;
  if (!(ser >> length)) return false;
  return ser.skip(length, 1);
}

bool gen_skip_over(Serializer& ser,  ::CarlaData::ImageSensor*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::CarlaData::ImageSensor>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: ImageSensor */

/* End MODULE: CarlaData */
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

namespace {
XTypes::TypeObject minimal_to0()
{
  const unsigned char to_bytes[] = { 67, 0, 0, 0, 241, 81, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 3, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9, 28, 182, 15, 213, 0, 11, 0, 0, 0, 1, 0, 0, 0, 1, 0, 9, 180, 98, 138, 201, 0, 11, 0, 0, 0, 2, 0, 0, 0, 1, 0, 9, 46, 63, 26, 235  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 0");
  }
  return to;
}

XTypes::TypeObject minimal_to1()
{
  const unsigned char to_bytes[] = { 99, 0, 0, 0, 241, 81, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 5, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9, 18, 160, 85, 191, 0, 11, 0, 0, 0, 1, 0, 0, 0, 1, 0, 9, 149, 84, 242, 157, 0, 11, 0, 0, 0, 2, 0, 0, 0, 1, 0, 9, 20, 216, 147, 48, 0, 11, 0, 0, 0, 3, 0, 0, 0, 1, 0, 9, 172, 26, 69, 61, 0, 11, 0, 0, 0, 4, 0, 0, 0, 1, 0, 9, 111, 184, 249, 169  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 1");
  }
  return to;
}

XTypes::TypeObject minimal_to2()
{
  const unsigned char to_bytes[] = { 103, 0, 0, 0, 241, 81, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 87, 0, 0, 0, 5, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 128, 243, 1, 0, 0, 2, 75, 163, 20, 11, 11, 0, 0, 0, 1, 0, 0, 0, 1, 0, 6, 180, 53, 226, 39, 0, 11, 0, 0, 0, 2, 0, 0, 0, 1, 0, 6, 234, 174, 38, 166, 0, 11, 0, 0, 0, 3, 0, 0, 0, 1, 0, 13, 54, 128, 54, 82, 0, 11, 0, 0, 0, 4, 0, 0, 0, 1, 0, 3, 233, 70, 103, 246  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 2");
  }
  return to;
}

XTypes::TypeMap get_minimal_type_map_private()
{
  XTypes::TypeMap tm;
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(5, 90, 95, 145, 234, 154, 192, 199, 245, 232, 240, 224, 242, 76))] = minimal_to0();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(118, 40, 221, 14, 122, 115, 28, 70, 59, 1, 122, 116, 75, 199))] = minimal_to1();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(220, 10, 166, 107, 57, 146, 81, 246, 203, 141, 46, 133, 45, 53))] = minimal_to2();
  return tm;
}

}

const XTypes::TypeMap& get_minimal_type_map()
{
  static XTypes::TypeMap tm;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), tm);
  if (tm.empty()) {
    tm = get_minimal_type_map_private();
  }
  return tm;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

