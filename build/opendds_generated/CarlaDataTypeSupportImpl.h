/* -*- C++ -*- */
/* Generated by /home/sdv/OpenDDS-3.21/bin/opendds_idl version 3.21.0 (ACE version 6.2a_p25) running on input file /media/sdv/47d6b45a-afd5-40a2-b8ae-c185573d86ab/Image_DDS_COde/yashesvi/carlabridge-end/CarlaData.idl */
#ifndef OPENDDS_IDL_GENERATED_CARLADATATYPESUPPORTIMPL_H_NZXRR2
#define OPENDDS_IDL_GENERATED_CARLADATATYPESUPPORTIMPL_H_NZXRR2

#include <dds/Version.h>
#if !OPENDDS_VERSION_EXACTLY(3, 21, 0)
#  error "This file should be regenerated with opendds_idl"
#endif
#include <dds/DCPS/Definitions.h>

#include <dds/DdsDcpsC.h>

#include "CarlaDataC.h"
#include "CarlaDataTypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/TypeSupportImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/ValueReader.h"
#include "dds/DCPS/ValueWriter.h"
#include "dds/DCPS/XTypes/TypeObject.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: OpenDDS */


/* End MODULE: OpenDDS */


/* Begin MODULE: CarlaData */



/* Begin STRUCT: RadarSensor */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct CarlaData_RadarSensor_xtag {};
template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<CarlaData_RadarSensor_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<CarlaData_RadarSensor_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::CarlaData::RadarSensor& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::CarlaData::RadarSensor& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::CarlaData::RadarSensor& stru);

void serialized_size(const Encoding& encoding, size_t& size, const  ::CarlaData::RadarSensor& stru);

bool operator<<(Serializer& strm, const  ::CarlaData::RadarSensor& stru);

bool operator>>(Serializer& strm,  ::CarlaData::RadarSensor& stru);

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const  ::CarlaData::RadarSensor>& stru);

bool operator<<(Serializer& strm, const NestedKeyOnly<const  ::CarlaData::RadarSensor>& stru);

bool operator>>(Serializer& strm, const NestedKeyOnly< ::CarlaData::RadarSensor>& stru);

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::CarlaData::RadarSensor>& stru);

bool operator<<(Serializer& strm, const KeyOnly<const  ::CarlaData::RadarSensor>& stru);

bool operator>>(Serializer& strm, const KeyOnly< ::CarlaData::RadarSensor>& stru);

template <>
struct MarshalTraits< ::CarlaData::RadarSensor> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(4);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
    seq[3] = OpenDDS::DCPS::UNALIGNED_CDR_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(20);
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(0);
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const  ::CarlaData::RadarSensor&) { return false; }
  static bool from_message_block( ::CarlaData::RadarSensor&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace CarlaData {
/// This structure supports use of std::map with one or more keys.
struct  RadarSensor_OpenDDS_KeyLessThan {
  bool operator()(const  ::CarlaData::RadarSensor&, const  ::CarlaData::RadarSensor&) const
  {
    // With no keys, return false to allow use of
    // map with just one entry
    return false;
  }
};
}


namespace CarlaData {
class RadarSensorTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits< ::CarlaData::RadarSensor> {
  typedef  ::CarlaData::RadarSensor MessageType;
  typedef  ::CarlaData::RadarSensorSeq MessageSequenceType;
  typedef  ::CarlaData::RadarSensorTypeSupport TypeSupportType;
  typedef  ::CarlaData::RadarSensorTypeSupportImpl TypeSupportImplType;
  typedef  ::CarlaData::RadarSensorDataWriter DataWriterType;
  typedef  ::CarlaData::RadarSensorDataReader DataReaderType;
  typedef  ::CarlaData::RadarSensor_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const  ::CarlaData::RadarSensor> KeyOnlyType;

  static const char* type_name() { return "CarlaData::RadarSensor"; }
  static bool gen_has_key() { return false; }
  static size_t key_count() { return 0; }
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace CarlaData {
class  RadarSensorTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<RadarSensorTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<RadarSensor> TraitsType;
  typedef OpenDDS::DCPS::MarshalTraits<RadarSensor> MarshalTraitsType;
  typedef RadarSensorTypeSupport TypeSupportType;
  typedef RadarSensorTypeSupport::_var_type _var_type;
  typedef RadarSensorTypeSupport::_ptr_type _ptr_type;

  RadarSensorTypeSupportImpl() {}
  virtual ~RadarSensorTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;

  void representations_allowed_by_type(::DDS::DataRepresentationIdSeq& seq);

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual const OpenDDS::XTypes::TypeIdentifier& getCompleteTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getCompleteTypeMap() const;

  virtual OpenDDS::DCPS::Extensibility getExtensibility() const;

  static RadarSensorTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
const MetaStruct& getMetaStruct< ::CarlaData::RadarSensor>();
bool gen_skip_over(Serializer& ser,  ::CarlaData::RadarSensor*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: RadarSensor */


/* Begin STRUCT: VehicleOdometry */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct CarlaData_VehicleOdometry_xtag {};
template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<CarlaData_VehicleOdometry_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<CarlaData_VehicleOdometry_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::CarlaData::VehicleOdometry& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::CarlaData::VehicleOdometry& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::CarlaData::VehicleOdometry& stru);

void serialized_size(const Encoding& encoding, size_t& size, const  ::CarlaData::VehicleOdometry& stru);

bool operator<<(Serializer& strm, const  ::CarlaData::VehicleOdometry& stru);

bool operator>>(Serializer& strm,  ::CarlaData::VehicleOdometry& stru);

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const  ::CarlaData::VehicleOdometry>& stru);

bool operator<<(Serializer& strm, const NestedKeyOnly<const  ::CarlaData::VehicleOdometry>& stru);

bool operator>>(Serializer& strm, const NestedKeyOnly< ::CarlaData::VehicleOdometry>& stru);

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::CarlaData::VehicleOdometry>& stru);

bool operator<<(Serializer& strm, const KeyOnly<const  ::CarlaData::VehicleOdometry>& stru);

bool operator>>(Serializer& strm, const KeyOnly< ::CarlaData::VehicleOdometry>& stru);

template <>
struct MarshalTraits< ::CarlaData::VehicleOdometry> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(4);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
    seq[3] = OpenDDS::DCPS::UNALIGNED_CDR_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(12);
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(0);
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const  ::CarlaData::VehicleOdometry&) { return false; }
  static bool from_message_block( ::CarlaData::VehicleOdometry&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace CarlaData {
/// This structure supports use of std::map with one or more keys.
struct  VehicleOdometry_OpenDDS_KeyLessThan {
  bool operator()(const  ::CarlaData::VehicleOdometry&, const  ::CarlaData::VehicleOdometry&) const
  {
    // With no keys, return false to allow use of
    // map with just one entry
    return false;
  }
};
}


namespace CarlaData {
class VehicleOdometryTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits< ::CarlaData::VehicleOdometry> {
  typedef  ::CarlaData::VehicleOdometry MessageType;
  typedef  ::CarlaData::VehicleOdometrySeq MessageSequenceType;
  typedef  ::CarlaData::VehicleOdometryTypeSupport TypeSupportType;
  typedef  ::CarlaData::VehicleOdometryTypeSupportImpl TypeSupportImplType;
  typedef  ::CarlaData::VehicleOdometryDataWriter DataWriterType;
  typedef  ::CarlaData::VehicleOdometryDataReader DataReaderType;
  typedef  ::CarlaData::VehicleOdometry_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const  ::CarlaData::VehicleOdometry> KeyOnlyType;

  static const char* type_name() { return "CarlaData::VehicleOdometry"; }
  static bool gen_has_key() { return false; }
  static size_t key_count() { return 0; }
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace CarlaData {
class  VehicleOdometryTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<VehicleOdometryTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<VehicleOdometry> TraitsType;
  typedef OpenDDS::DCPS::MarshalTraits<VehicleOdometry> MarshalTraitsType;
  typedef VehicleOdometryTypeSupport TypeSupportType;
  typedef VehicleOdometryTypeSupport::_var_type _var_type;
  typedef VehicleOdometryTypeSupport::_ptr_type _ptr_type;

  VehicleOdometryTypeSupportImpl() {}
  virtual ~VehicleOdometryTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;

  void representations_allowed_by_type(::DDS::DataRepresentationIdSeq& seq);

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual const OpenDDS::XTypes::TypeIdentifier& getCompleteTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getCompleteTypeMap() const;

  virtual OpenDDS::DCPS::Extensibility getExtensibility() const;

  static VehicleOdometryTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
const MetaStruct& getMetaStruct< ::CarlaData::VehicleOdometry>();
bool gen_skip_over(Serializer& ser,  ::CarlaData::VehicleOdometry*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: VehicleOdometry */


/* Begin STRUCT: ImageSensor */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct CarlaData_ImageSensor_xtag {};
template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<CarlaData_ImageSensor_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<CarlaData_ImageSensor_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::CarlaData::ImageSensor& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::CarlaData::ImageSensor& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::CarlaData::ImageSensor& stru);

void serialized_size(const Encoding& encoding, size_t& size, const  ::CarlaData::ImageSensor::_raw_data_seq& seq);

bool operator<<(Serializer& strm, const  ::CarlaData::ImageSensor::_raw_data_seq& seq);

bool operator>>(Serializer& strm,  ::CarlaData::ImageSensor::_raw_data_seq& seq);

void serialized_size(const Encoding& encoding, size_t& size, const  ::CarlaData::ImageSensor& stru);

bool operator<<(Serializer& strm, const  ::CarlaData::ImageSensor& stru);

bool operator>>(Serializer& strm,  ::CarlaData::ImageSensor& stru);

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const  ::CarlaData::ImageSensor>& stru);

bool operator<<(Serializer& strm, const NestedKeyOnly<const  ::CarlaData::ImageSensor>& stru);

bool operator>>(Serializer& strm, const NestedKeyOnly< ::CarlaData::ImageSensor>& stru);

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::CarlaData::ImageSensor>& stru);

bool operator<<(Serializer& strm, const KeyOnly<const  ::CarlaData::ImageSensor>& stru);

bool operator>>(Serializer& strm, const KeyOnly< ::CarlaData::ImageSensor>& stru);

template <>
struct MarshalTraits< ::CarlaData::ImageSensor> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(4);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
    seq[3] = OpenDDS::DCPS::UNALIGNED_CDR_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(0);
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const  ::CarlaData::ImageSensor&) { return false; }
  static bool from_message_block( ::CarlaData::ImageSensor&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace CarlaData {
/// This structure supports use of std::map with one or more keys.
struct  ImageSensor_OpenDDS_KeyLessThan {
  bool operator()(const  ::CarlaData::ImageSensor&, const  ::CarlaData::ImageSensor&) const
  {
    // With no keys, return false to allow use of
    // map with just one entry
    return false;
  }
};
}


namespace CarlaData {
class ImageSensorTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits< ::CarlaData::ImageSensor> {
  typedef  ::CarlaData::ImageSensor MessageType;
  typedef  ::CarlaData::ImageSensorSeq MessageSequenceType;
  typedef  ::CarlaData::ImageSensorTypeSupport TypeSupportType;
  typedef  ::CarlaData::ImageSensorTypeSupportImpl TypeSupportImplType;
  typedef  ::CarlaData::ImageSensorDataWriter DataWriterType;
  typedef  ::CarlaData::ImageSensorDataReader DataReaderType;
  typedef  ::CarlaData::ImageSensor_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const  ::CarlaData::ImageSensor> KeyOnlyType;

  static const char* type_name() { return "CarlaData::ImageSensor"; }
  static bool gen_has_key() { return false; }
  static size_t key_count() { return 0; }
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace CarlaData {
class  ImageSensorTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<ImageSensorTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<ImageSensor> TraitsType;
  typedef OpenDDS::DCPS::MarshalTraits<ImageSensor> MarshalTraitsType;
  typedef ImageSensorTypeSupport TypeSupportType;
  typedef ImageSensorTypeSupport::_var_type _var_type;
  typedef ImageSensorTypeSupport::_ptr_type _ptr_type;

  ImageSensorTypeSupportImpl() {}
  virtual ~ImageSensorTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;

  void representations_allowed_by_type(::DDS::DataRepresentationIdSeq& seq);

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual const OpenDDS::XTypes::TypeIdentifier& getCompleteTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getCompleteTypeMap() const;

  virtual OpenDDS::DCPS::Extensibility getExtensibility() const;

  static ImageSensorTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
const MetaStruct& getMetaStruct< ::CarlaData::ImageSensor>();
bool gen_skip_over(Serializer& ser,  ::CarlaData::ImageSensor::_raw_data_seq*);

bool gen_skip_over(Serializer& ser,  ::CarlaData::ImageSensor*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: ImageSensor */

/* End MODULE: CarlaData */
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif /* OPENDDS_IDL_GENERATED_CARLADATATYPESUPPORTIMPL_H_NZXRR2 */
